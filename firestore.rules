rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function getRole() {
      return get(/databases/$(database)/documents/roles/$(request.auth.token.email)).data.role;
    }
  
    match /users/{userId} {
      allow read: if request.auth.uid == userId;
      allow create: if request.auth != null;
      allow update: if getRole() == 'admin' || request.auth.uid == userId;
      allow list, delete: if getRole() == 'admin';
    }

    match /users/{userId}/opportunities/{opportunityId} {
      allow read, create, delete, list: if request.auth.uid == userId;
    }

    match /users/{userId}/posts/{postId} {
      allow read, write: if request.auth.uid == userId;
    }
    
    match /roles/{email} {
    	allow read: if request.auth != null;
    }
    
    match /opportunities/{opportunityId} {
    	allow read: if request.auth != null;
      allow create: if getRole() == 'staff' || getRole() == 'student' || getRole() == 'admin';
      allow update, delete: if getRole() == 'admin' || resource.data.creatorId == request.auth.uid || getRole() == 'member'; //TODO: change to update with cloud function instead of allowing member
    }
    
    match /opportunities/{opportunityId}/membersSignedUp/{memberId} {
    	allow read: if request.auth != null;
      allow write: if getRole() == 'admin' || (getRole() == 'member' && request.auth.uid == memberId); 
      // TODO: member or creator can update or delete, member can sign up
    }
  }
}